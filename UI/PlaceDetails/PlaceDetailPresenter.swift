//
//  PlaceDetailPresenter.swift
//  Places
//
//  Created Sebastian Cancinos on 23/03/2020.
//  Copyright © 2020 sebacancinos. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class PlaceDetailPresenter: PlaceDetailPresenterProtocol {

    weak private var view: PlaceDetailViewProtocol?
    var interactor: PlaceDetailInteractorInputProtocol?
    private let router: PlaceDetailWireframeProtocol

    init(interface: PlaceDetailViewProtocol, interactor: PlaceDetailInteractorInputProtocol?, router: PlaceDetailWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

    func ready() {
        interactor?.loadLocation()
    }
}

extension PlaceDetailPresenter: PlaceDetailInteractorOutputProtocol {
    func show(location: Location) {
        view?.addressLabel.text = location.vicinity
        view?.nameLabel.text = location.name

        if let types = location.types {
            view?.typesLabel.text = types.map({
                return $0.replacingOccurrences(of: "_", with: " ").capitalized
                }).joined(separator: ", ")
        } else {
            view?.typesLabel.isHidden = true
        }

        if let rating = location.rating {
            view?.ratingView.rating = Double(rating)
        } else {
            view?.ratingView.isHidden = true
        }
    }

    func add(photo: UIImage) {
        guard let view = view else { return }
        DispatchQueue.main.async {
            let imageView = UIImageView(image: photo)

            let widthConstraint = NSLayoutConstraint(item: imageView,
                                                     attribute: NSLayoutConstraint.Attribute.width,
                                                     relatedBy: NSLayoutConstraint.Relation.equal,
                                                     toItem: nil,
                                                     attribute: NSLayoutConstraint.Attribute.notAnAttribute,
                                                     multiplier: 1,
                                                     constant: UIScreen.main.bounds.size.width)
            imageView.contentMode = .scaleAspectFit
            imageView.clipsToBounds = true
            imageView.addConstraint(widthConstraint)

            view.photoStack.addArrangedSubview(imageView)
            view.photoStack.layoutIfNeeded()
            view.photoScroll.contentSize = view.photoStack.frame.size
        }
    }
}
