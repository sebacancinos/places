//
//  PlacesProtocols.swift
//  Places
//
//  Created Sebastian Cancinos on 22/03/2020.
//  Copyright © 2020 sebacancinos. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import Foundation
import UIKit
// MARK: Wireframe -
protocol PlacesWireframeProtocol: class {
    func show(_ location: Location)
}

// MARK: Presenter -
protocol PlacesPresenterProtocol: class {

    var interactor: PlacesInteractorInputProtocol? { get set }

    func ready()
    func refresh()
    func select(_ location: Location)
    func filter(by type: LocationType)
    func infiniteScroll()
}

// MARK: Interactor -
protocol PlacesInteractorOutputProtocol: class {

    /* Interactor -> Presenter */
    func present(locations: [Location])
    func presentDetails(for location: Location)
    func present(error: Error)
}

protocol PlacesInteractorInputProtocol: class {

    var presenter: PlacesInteractorOutputProtocol? { get set }

    /* Presenter -> Interactor */
    func loadLocations()
    func loadNextLocations()
    func loadLocations(by type: LocationType)
    func loadDetails(for location: Location)
}

// MARK: View -
protocol PlacesViewProtocol: class {
    var presenter: PlacesPresenterProtocol? { get set }

    /* Presenter -> ViewController */
    func update(locations: [Location])
    func show(error: Error)
}

protocol PlacesListDelegate: class {
    func selected(_ location: Location)
    func infinteScroll()
    func filter(by type: LocationType)
}
